exit
curr_node
new_node
exit
new_node == curr_node
new_node > curr_node
new_node < curr_node
curr_node
new_node
next
exit
curr_node
exit
new_node
curr_node
exit
new_node
curr_node
exit
curr_node
new_node
exit
new_node
curr_node
exit
new_node < curr_node
new_node > curr_node
new_node == curr_node
new_node = curr_node
new_node > curr_node
new_node < curr_node
curr_node
new_node
exit
@root
curr_node
next
enxt
curr_node
new_node
exit
new_node >  @root
new_node < @root
new_node < root
@root > new_node
@root
new_node
next
node
next
node
next
node
next
node
next
node
next
exit
node
next
node
next
enxt
node
next
node
next
node
next
node
next
node
next
node
next
node
next
node
next
right_arr
arr
next
arr
next
arr
next
arr
(1 / 2)
1 / 2
arr[mid+1..last].length - 1
arr
arr[mid+1..last]
arr
last = arr.length - 1
mid
last
first
arr[mid+1..last]
arr
last
mid
right_arr
arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
exit
arr
node
next
exit
node
arr
next
node
next
node
arr
next
arr
next
node
exit
node
arr
next
arr
next
right_arr
next
arr
next
node
arr
left_arr
next
last
first
mid
next
arr
left_arr
next
left_arr
next
exit
eixt
last
mid
mid-1
mid
first
arr
left_arr
next
arr
next
arr
next
arr
next
arr
next
arr
next
node
next
node
next
arr
next
left_arr
next
exit
exi
next
node
right_arr
next
right_arr
next
last
next
left_arr
next
exit
next
left_arr
next
last
first
next
left_arr
next
left_arr
next
exit
arr
next
arr
next
exit
arr[0..mid]
mid
last
first
left_arr
next
enxt
left_arr
last
first
mid
next
arr
next
left_arr
arr
arr.length
last
last.length-1
first
mid
left_arr
next
exit
left_arr
next
left_arr
next
left_arr
next
exit
!
!!!
left_arr
next
