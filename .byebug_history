exit
pretty_print
height(r_child)
exit
node.data
r_height
l_height
next
node.data
next
pretty_print
node.data
next
l_height
r_height
next
l_height
r_height
next
l_height
next
node.left_child.nil?
next
node
r_height
l_height
next
height(r_child)
height(l_child)
pretty_print
next
pretty_print
next
exit
height(r_child)
height(l_child)
pretty_print
difference
next
difference
exit
next
difference
exit
difference
exit
next
first
last
arr.length
arr
exit
arr.length
exit
arr
exit
arr
exit
arr
exit
r_child
next
l_child
next
parent.data
parent
exit
l_height
r_height
next
l_height
r_height
next
pretty_print
node.data
next
node.data
next
pretty_print
node.data
next
r_height
l_height
next
pretty_print
node.data
next
node.data
next
node.data
next
l_height
r_height
pretty_print
node.data
next
r_height
height
pretty_print
node.data
node.dat
next
r_height
l_height
next
node.data
next
exit
next
exit
eixt
exit
next
node.left_child.nil?
node
exit
height
exit
r_tree_height
l_tree_height
exit
exi
next
height
next
height
next
continue
next
exit
next
node
node.data
next
ordered
queue
next
queue[0]
next
curr_node.right_child.data
curr_node.left_child.data
curr_node
ordered
next
curr_node
next
curr_node
node.data
node
queue[0.data]
queue[0]
queue
exit
node
exit
node
exit
next
node
node.right_child.nil?
node.data
next
node.right_child.nil?
node
node.data
value
next
node.data
value
next
value
exit
node
value
vallue
node.data
next
exit
next
value
exit
root
next
exit
back
root
new_node
next
exit
root
root == nil
root
next
root
new_node
next
new_node
curr_node
next
exit
curr_node
new_node
next
step
exit
next
continue
next
exit
next
exit
next
curr_node
new_node
next
@root
next
new_node
curr_node
next
curr_node
next
curr_node
next
new_node
curr_node
next
curr_node
next
enxt
exit
eit
new_node
enw_node
curr_node
exit
@root
new_node
curr_node
next
new_node
@root
curr_node
exit
curr_node
new_node
exit
new_node == curr_node
new_node > curr_node
new_node < curr_node
curr_node
new_node
next
exit
curr_node
exit
